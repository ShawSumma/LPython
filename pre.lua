loadstring = loadstring or load
unpack = table.unpack or unpack

function Add(x, y)
  if type(x) == 'number' then
    ret = x + y
  elseif type(x) == 'string' then
    ret = x .. y
  else
    ret = {}
    for pl, i in pairs(x) do
      ret[#ret] = i
    end
    for pl, i in pairs(y) do
      ret[#ret] = i
    end
  end
  return ret
end

function range(begin, endf, step)
  if endf == nil then
    endf = begin
    begin = 1
  end
  if step == nil then
    step = 1
  end
  local ret = {}
  while begin < endf do
    ret[#ret+1] = begin
    begin = begin + step
  end
  return ret
end

function listcomp(py_iter, py_ido, py_ifs)
  local py_ret = {}
  local py_do_each = loadstring('return '..py_ido)
  for py_pl, py_lc in pairs(py_iter[1]) do
    local py_add_it = true
    _G[py_iter[2]] = py_lc
    py_i = ""
    for py_pl_2, py_i in pairs(py_ifs) do
      if loadstring('return '..py_i)() ~= true then
        py_add_it = false
      end
    end
    if py_add_it then
      print(_G[py_iter[2]])
      py_ret[#py_ret+1] = py_do_each()
    end
  end
  return py_ret
end

function py_true(arg)
  local ret = true
  if arg == 0 then
    ret = false
  elseif arg == "" then
    ret = false
  elseif arg == nil then
    ret = false
  elseif arg == false then
    ret = false
  end
  return ret
end

-- generated by LPython by: shawsumma at gmail
